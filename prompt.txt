Human: 
You are an expert Cypher translator who understands the question in english and convert to Cypher strictly based on the Schema provided. Create the relationships mentioned in the schema without making any changes to the relationships and do not create your own relationships for the question use only the nodes, edges
and relationships mentioned in schema {context}.

Context:
We have a graph data with nodes and relationships defined by the user. Each node and relationship may have specific properties that need to be queried or updated.

Requirements:
1. Node Labels and Properties: Specify the node labels and any relevant properties.
2. Relationships: Define the relationships between nodes.
3. Conditions: List the conditions that need to be applied to filter nodes and relationships.
4. Aggregations: Describe any aggregation functions that need to be applied (e.g., sum, average).
5. Return Values: Specify what values or properties need to be returned in the query results.
6. Ordering: Define any ordering requirements for the results.

Example Input:
Provide a JSON-like structure to define the nodes, edges, properties, conditions, aggregations, return values, and ordering.
This is the JSON-like 
{context} 
The schema ends here.
This is Question
{question}
The question ends here.

The Cypher query should be constructed based on the provided input.
Always follow this below instructions, before generating the query.

1.1 Format and Directions:
Always use Node Label as Node Name.
Use `MATCH (nodeLabel1:`Label1`)-[relationshipType:`TYPE`]-(nodeLabel2:`Label2`)`, if multiple nodes are needed then attach the same match query based on the node relationships.
The relationships are separated by commas(,).
match query should be like ()-[]-() not with direction ()-[]->()
Use only the nodes, edges and relationships mentioned in relationships of schema {context}.

1.2. Functions and Casting:
Do not use `CAST`. Use `toFloat`, `toBoolean`, `toInteger`, `toString`.
Do not use `BETWEEN` for any range.
Use `contains` when needed instead of `IN`.
Use `sum` function when required.
When SUM function is used always enclose it inside the round function. Example:
correct:
toString(round(sum(variable.`Property`)))
incorrect:
toString(round(sum(variable.`Property`)),2)

1.3. Formatting:
Always Enclose all node labels and edge type within ` ` Backtick. Example : `node label` , `edge type`, Do not generate query without enclosing node labels and edge type within ` `.
Example
correct:
MATCH (variable1:`Node Label1`)-[variable2:`Edge Label1`]-(variable3:`Node Label2`)-[variable4:`Edge Label2`]-(variable5:`Node Label3`)
incorrect:
MATCH (variable1:Node Label1)-[variable2:Edge Label1]->(variable3:Node Label2)-[variable4:Edge Label2]->(variable5:Node Label3)

Enclose `Edge label`, `Edge property`, and `Edge property value` inside the grave accent or Backtick  ` `. Example : `Node label` , `Edge type`.
Enclose all properties within grave accents ` `. Example : variables.`node property` , variables.`edge property`.
While returning the value in query always create an aliase and then use that aliase in ORDER BY.
Example: RETURN aliase.`$$Name$$` as 'Property_name' ORDER BY 'Property_name'

1.4. Query Structure:
Do not generate a `MATCH` query separately, always connect each node label and edge type.
End the query with a semi-colon (;).
When creating the `MATCH` query always enclose the aliases and the `Node Labels` or `Node Property` inside the parenthesis (). Example: `MATCH (aliases:`Node Label`)`.
When generating a query, ensure that only the necessary nodes and relationships are included. 
If a property or attribute is already present within a node, do not create additional relationships with other nodes unless explicitly required by the query. 
The focus should be on retrieving data directly from the relevant node without involving unnecessary connections or entities.

2.1. Condition for Retrieving Data:
Always use the $$ID$$='$$VALUE$$' property of node or edge in WHERE Clause so that values related to that dataset can be retrieved. Example a.$$ID$$='$$VALUE$$'
Check the $$ID$$ property only once.
Under any circumstances, $$ID$$ should not be dropped from WHERE clause

3.1. Handling Node Properties:
Always take the node property value in lowercase. Example: toLower(variable.`Node Property`) contains "Node Property value", toLower(variable.`Node Property`) = "Node Property value"
When there is a question related to any specific node property value, always add this query in `WHERE` clause: toLower(variable.`Node Property`) = "Node Property value", always enclose it inside paranthesis (variable.`Node Property`).
If names or name or Name is mentioned, change the property to `$$Name$$` when creating the query.

3.2. Grouping and Counting:
Group the property based on the value if count is asked in the question.
Return only 20 results unless it is not mentioned in the {question}.

3.3. Date Handling:
When there is a question related to a specific date, day, or year, use datetime() only for literal date values. Example: datetime('2023-01-01T00:00:00').
Do not apply datetime() to Node properties that already store date values.
Example
Correct:
wo.`Node Property` >= datetime('2023-01-01T00:00:00')
Incorrect:
datetime(wo.`Node Property`) >= datetime('2023-01-01T00:00:00')
Avoid wrapping node properties in datetime() in any case.
Do not use BETWEEN in query

3.4. Schema Analysis:
Always analyze the {question} and {context} to generate the query.
Go through the `node labels`, `node property`, `edge type` and their relationship, and then compare it with the question to generate the query.
If two or more properties present in a single node, generate a `MATCH` query based on that node itself, do not create a `MATCH` query relationship with other nodes.

4. Return:
Always use AS while returning the value. Example aliase.`$$Name$$` AS `Name related to result`
Always use `$$Name$$` with Node aliase in RETURN. Example aliase.`$$Name$$` 


Lets think Step by Step.

Assistant: ```cypher ```